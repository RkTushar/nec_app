class Country {
  final String code; // ISO 3166-1 alpha-2 code, e.g. "ZA"
  final String name; // Localized common name, e.g. "South Africa"
  final String flag; // Emoji flag, e.g. "ðŸ‡¿ðŸ‡¦"
  final String dial; // Country calling code without '+', e.g. "27"
  final String currencyCode; // ISO 4217, e.g. "ZAR"
  final String currencySymbol; // e.g. "R", "$", "Â£"

  const Country({
    required this.code,
    required this.name,
    required this.flag,
    required this.dial,
    required this.currencyCode,
    required this.currencySymbol,
  });

  Map<String, String> toMap() => <String, String>{
        'code': code,
        'name': name,
        'flag': flag,
        'dial': dial,
        'currency': currencyCode,
        'currencySymbol': currencySymbol,
      };
}

class CountryRepository {
  CountryRepository._();

  static final List<Country> _countries = <Country>[
    const Country(code: 'GB', name: 'United Kingdom', flag: 'ðŸ‡¬ðŸ‡§', dial: '44', currencyCode: 'GBP', currencySymbol: 'Â£'),
    const Country(code: 'US', name: 'United States', flag: 'ðŸ‡ºðŸ‡¸', dial: '1', currencyCode: 'USD', currencySymbol: r'$'),
    const Country(code: 'ZA', name: 'South Africa', flag: 'ðŸ‡¿ðŸ‡¦', dial: '27', currencyCode: 'ZAR', currencySymbol: 'R'),
    const Country(code: 'IN', name: 'India', flag: 'ðŸ‡®ðŸ‡³', dial: '91', currencyCode: 'INR', currencySymbol: 'â‚¹'),
    const Country(code: 'JP', name: 'Japan', flag: 'ðŸ‡¯ðŸ‡µ', dial: '81', currencyCode: 'JPY', currencySymbol: 'Â¥'),
    const Country(code: 'BD', name: 'Bangladesh', flag: 'ðŸ‡§ðŸ‡©', dial: '880', currencyCode: 'BDT', currencySymbol: 'à§³'),
    const Country(code: 'PK', name: 'Pakistan', flag: 'ðŸ‡µðŸ‡°', dial: '92', currencyCode: 'PKR', currencySymbol: 'â‚¨'),
    const Country(code: 'LK', name: 'Sri Lanka', flag: 'ðŸ‡±ðŸ‡°', dial: '94', currencyCode: 'LKR', currencySymbol: 'Rs'),
    const Country(code: 'NP', name: 'Nepal', flag: 'ðŸ‡³ðŸ‡µ', dial: '977', currencyCode: 'NPR', currencySymbol: 'Rs'),
    const Country(code: 'NG', name: 'Nigeria', flag: 'ðŸ‡³ðŸ‡¬', dial: '234', currencyCode: 'NGN', currencySymbol: 'â‚¦'),
    const Country(code: 'PH', name: 'Philippines', flag: 'ðŸ‡µðŸ‡­', dial: '63', currencyCode: 'PHP', currencySymbol: 'â‚±'),
  ];

  static List<Country> getAll() => List<Country>.unmodifiable(_countries);

  static Country? byCode(String code) {
    if (code.trim().isEmpty) return null;
    try {
      return _countries.firstWhere(
        (Country c) => c.code.toUpperCase() == code.toUpperCase(),
      );
    } catch (_) {
      return null;
    }
  }

  static Country? byDial(String dial) {
    if (dial.trim().isEmpty) return null;
    try {
      final String normalized = dial.startsWith('+') ? dial.substring(1) : dial;
      return _countries.firstWhere((Country c) => c.dial == normalized);
    } catch (_) {
      return null;
    }
  }
}

class CurrencyRepository {
  CurrencyRepository._();

  // Demo USD-base rates similar to existing widgets for consistent UI.
  static final Map<String, double> _usdBaseRates = <String, double>{
    'USD': 1.0,
    'EUR': 0.93,
    'GBP': 0.81,
    'BDT': 132.00,
    'JPY': 150.0,
    'CAD': 1.36,
    'AUD': 1.50,
    'PKR': 278.00,
    'INR': 84.0,
    'LKR': 305.0,
    'NPR': 134.0,
    'NGN': 1600.0,
    'PHP': 58.0,
    'ZAR': 18.5,
  };

  static final Map<String, String> _currencyFlags = <String, String>{
    'USD': 'ðŸ‡ºðŸ‡¸',
    'EUR': 'ðŸ‡ªðŸ‡º',
    'GBP': 'ðŸ‡¬ðŸ‡§',
    'BDT': 'ðŸ‡§ðŸ‡©',
    'JPY': 'ðŸ‡¯ðŸ‡µ',
    'CAD': 'ðŸ‡¨ðŸ‡¦',
    'AUD': 'ðŸ‡¦ðŸ‡º',
    'PKR': 'ðŸ‡µðŸ‡°',
    'INR': 'ðŸ‡®ðŸ‡³',
    'LKR': 'ðŸ‡±ðŸ‡°',
    'NPR': 'ðŸ‡³ðŸ‡µ',
    'NGN': 'ðŸ‡³ðŸ‡¬',
    'PHP': 'ðŸ‡µðŸ‡­',
    'ZAR': 'ðŸ‡¿ðŸ‡¦',
  };

  static final Map<String, String> _currencySymbols = <String, String>{
    'USD': r'$',
    'EUR': 'â‚¬',
    'GBP': 'Â£',
    'BDT': 'BDT',
    'JPY': 'Â¥',
    'CAD': 'C\$',
    'AUD': 'A\$',
    'PKR': 'â‚¨',
    'INR': 'â‚¹',
    'LKR': 'Rs',
    'NPR': 'Rs',
    'NGN': 'â‚¦',
    'PHP': 'â‚±',
    'ZAR': 'R',
  };

  static Iterable<String> getSupportedCurrencies() => _usdBaseRates.keys;
  static double? rate(String currency) => _usdBaseRates[currency];
  static String symbol(String currency) => _currencySymbols[currency] ?? currency;
  static String flag(String currency) => _currencyFlags[currency] ?? '';

  static double? convert({required double amount, required String from, required String to}) {
    final double? fr = _usdBaseRates[from];
    final double? tr = _usdBaseRates[to];
    if (fr == null || tr == null) return null;
    return (amount / fr) * tr;
  }

  static double? perOne({required String from, required String to}) {
    final double? fr = _usdBaseRates[from];
    final double? tr = _usdBaseRates[to];
    if (fr == null || tr == null) return null;
    return (1.0 / fr) * tr;
  }

  static List<Country> defaultReceiverCountries() {
    const List<String> codes = <String>['BD', 'PK', 'IN', 'LK', 'NP', 'NG', 'PH'];
    return codes.map((String c) => CountryRepository.byCode(c)).whereType<Country>().toList();
  }
}


